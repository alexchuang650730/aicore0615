name: PowerAutomation v0.571 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  PROJECT_NAME: powerautomation
  VERSION: v0.571

jobs:
  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4

    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 安装依赖
      run: npm ci

    - name: 代码格式检查
      run: npm run lint

    - name: 类型检查
      run: npm run type-check

    - name: 安全扫描
      run: npm audit --audit-level moderate

  # 单元测试
  unit-tests:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4

    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 安装依赖
      run: npm ci

    - name: 运行单元测试
      run: npm run test:unit

    - name: 生成测试覆盖率报告
      run: npm run test:coverage

    - name: 上传覆盖率报告
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info

  # 集成测试
  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: powerauto_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout代码
      uses: actions/checkout@v4

    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 安装依赖
      run: |
        npm ci
        pip install -r shared_core/engines/requirements.txt

    - name: 运行集成测试
      run: npm run test:integration
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/powerauto_test
        REDIS_URL: redis://localhost:6379

    - name: 运行自动化测试框架
      run: python tests/automated_testing_framework/system_tester.py --environment test

  # 构建Docker镜像
  build-images:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push'
    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4

    - name: 配置AWS凭证
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 登录ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.ECR_REGISTRY }}/powerautomation/enterprise
          ${{ env.ECR_REGISTRY }}/powerautomation/personal-pro
          ${{ env.ECR_REGISTRY }}/powerautomation/kilo-code
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: 构建企业版镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployment/docker/Dockerfile.enterprise
        push: true
        tags: ${{ env.ECR_REGISTRY }}/powerautomation/enterprise:${{ env.VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 构建个人专业版镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployment/docker/Dockerfile.personal-pro
        push: true
        tags: ${{ env.ECR_REGISTRY }}/powerautomation/personal-pro:${{ env.VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 构建Kilo Code引擎镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployment/docker/Dockerfile.kilo-code
        push: true
        tags: ${{ env.ECR_REGISTRY }}/powerautomation/kilo-code:${{ env.VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 镜像安全扫描
      run: |
        # 使用Trivy扫描镜像安全漏洞
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy image --exit-code 1 --severity HIGH,CRITICAL \
          ${{ env.ECR_REGISTRY }}/powerautomation/enterprise:${{ env.VERSION }}

  # 部署到Staging环境
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4

    - name: 配置AWS凭证
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 设置Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: 部署到Staging
      run: |
        cd deployment/terraform
        terraform init
        terraform workspace select staging || terraform workspace new staging
        terraform plan -var="environment=staging" -var="aws_region=${{ env.AWS_REGION }}"
        terraform apply -auto-approve -var="environment=staging" -var="aws_region=${{ env.AWS_REGION }}"

    - name: 运行Staging测试
      run: |
        # 等待服务启动
        sleep 120
        
        # 运行端到端测试
        python tests/automated_testing_framework/system_tester.py \
          --environment staging \
          --endpoint https://staging.powerautomation.ai

  # 部署到生产环境
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4

    - name: 配置AWS凭证
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 设置Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: 部署到生产环境
      run: |
        cd deployment/terraform
        terraform init
        terraform workspace select production || terraform workspace new production
        terraform plan -var="environment=production" -var="aws_region=${{ env.AWS_REGION }}"
        terraform apply -auto-approve -var="environment=production" -var="aws_region=${{ env.AWS_REGION }}"

    - name: 更新ECS服务
      run: |
        # 更新企业版服务
        aws ecs update-service \
          --cluster powerauto-production-cluster \
          --service powerauto-enterprise \
          --force-new-deployment

        # 更新个人专业版服务
        aws ecs update-service \
          --cluster powerauto-production-cluster \
          --service powerauto-personal-pro \
          --force-new-deployment

        # 更新Kilo Code引擎服务
        aws ecs update-service \
          --cluster powerauto-production-cluster \
          --service powerauto-kilo-code \
          --force-new-deployment

    - name: 等待部署完成
      run: |
        aws ecs wait services-stable \
          --cluster powerauto-production-cluster \
          --services powerauto-enterprise powerauto-personal-pro powerauto-kilo-code

    - name: 运行生产环境测试
      run: |
        # 运行健康检查
        python tests/automated_testing_framework/system_tester.py \
          --environment production \
          --endpoint https://powerautomation.ai \
          --health-check-only

    - name: 发送部署通知
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  # 性能测试
  performance-tests:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4

    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 安装K6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: 运行性能测试
      run: |
        k6 run tests/performance/load-test.js \
          --env BASE_URL=https://powerautomation.ai \
          --out json=performance-results.json

    - name: 分析性能结果
      run: |
        python tests/performance/analyze-results.py performance-results.json

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4

    - name: 运行OWASP ZAP扫描
      uses: zaproxy/action-full-scan@v0.7.0
      with:
        target: 'https://powerautomation.ai'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: 上传安全报告
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: report_html.html

